import React, {useCallback, useEffect, useState} from 'react';
import { useParams } from 'react-router-dom';
import './TabStyles.css';
import {UUID} from "node:crypto";
import { useTelegramAuth } from "../../../../context/TelegramAuthContext";
import Participant from "../../../../model/Participant";
import {
  changeEventOrganizer,
  deleteParticipantById,
  getEventParticipants
} from "../../../../api/endpoints/participantsEndpoints";
import ApiErrorResponse from "../../../../model/ApiErrorResponse";
import EventEntity from "../../../../model/EventEntity";
import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button } from '@mui/material';
import {getEventInviteLink} from "../../../../api/endpoints/eventEndpoints";


interface ParticipantItemProps {
  event: EventEntity;
}

const ParticipantsTab = ({event}: ParticipantItemProps) => {
  const {eventId} = useParams<{ eventId: UUID }>();
  const [participants, setParticipants] = useState<Participant[]>([]);
  const {user} = useTelegramAuth();
  const [inviteLink, setInviteLink] = useState<string | null>(null);

  const loadParticipants = useCallback(async () => {
    const participants = await getEventParticipants(eventId);
    if (!participants || participants instanceof ApiErrorResponse) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
      return;
    }
    setParticipants(participants);
    const link = await getEventInviteLink(user.id, eventId);
    setInviteLink(link);
  }, [eventId]);

  useEffect(() => {
    loadParticipants();
  }, [loadParticipants]);

  const isCurrentUserOrganizer = () => event.organizerTgUserId === user.id;

  const handleRemoveParticipant = async (participantId: UUID) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞?')) {
      await deleteParticipantById(participantId);
      await loadParticipants();
    }
  };

  const handleAssignOrganizer = async (participantTgId: number) => {
    if (window.confirm('–ù–∞–∑–Ω–∞—á–∏—Ç—å —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º? –í—ã –æ—Å—Ç–∞–Ω–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º, –Ω–æ –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –ø—Ä–∞–≤–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞.')) {
      await changeEventOrganizer(user.id, eventId, participantTgId);
      window.location.reload();
    }
  };

  const copyInviteLink = async () => {
    const link = await getEventInviteLink(user.id, eventId);
    navigator.clipboard.writeText(link)
        .then(() => {
          alert('–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        })
        .catch(err => {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É: ', err);
        });
  };

  return (
      <div>
        <h3>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</h3>
        <p>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.</p>
        <div style={{marginBottom: "10px"}}>
          <input className="invite-link-input" type="text" value={inviteLink} readOnly
                 style={{width: '80%', marginRight: 10}}/>
          <Button variant="contained" onClick={copyInviteLink} >–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</Button>
        </div>

        <h2>–£—á–∞—Å—Ç–Ω–∏–∫–∏</h2>
        <p>üëë ‚Äî –ù–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º</p>
        <p>‚ùå ‚Äî –£–¥–∞–ª–∏—Ç—å –∏–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</p>
        <TableContainer component={Paper}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>–£—á–∞—Å—Ç–Ω–∏–∫</TableCell>
                <TableCell>–†–æ–ª—å</TableCell>
                {isCurrentUserOrganizer() && <TableCell>–î–µ–π—Å—Ç–≤–∏—è</TableCell>}
              </TableRow>
            </TableHead>
            <TableBody>
              {participants.map((participant, index) => (
                  <TableRow key={participant.id}>
                    <TableCell>{index + 1}. {participant.tgUserId === user.id ? '–Ø' : (participant.name || '–ë–µ–∑ –∏–º–µ–Ω–∏')}</TableCell>
                    <TableCell>{participant.tgUserId === event.organizerTgUserId ? '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä' : '–£—á–∞—Å—Ç–Ω–∏–∫'}</TableCell>
                    {isCurrentUserOrganizer() && participant.tgUserId !== user.id && (
                        <TableCell>
                          <div className='buttons-action-participants'>
                              <Button
                                  variant="outlined"
                                  onClick={() => handleAssignOrganizer(participant.tgUserId)}
                                  sx={{
                                    border: '2px solid #FFA500',
                                    '&:hover': {
                                      borderColor: '#FF8C00', // –¢–µ–º–Ω–µ–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                                      backgroundColor: 'rgba(255, 165, 0, 0.08)', // –õ–µ–≥–∫–∏–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                                    },
                                  }}
                              >
                                üëë
                              </Button>
                              <Button
                                  variant="outlined"
                                  onClick={() => handleRemoveParticipant(participant.id)}
                                  sx={{
                                    border: '2px solid #ff1e00',
                                    '&:hover': {
                                      borderColor: '#ce1800', // –¢–µ–º–Ω–µ–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                                      backgroundColor: 'rgba(255, 30, 0, 0.08)', // –õ–µ–≥–∫–∏–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                                    },
                                  }}
                              >
                                ‚ùå
                              </Button>
                          </div>
                        </TableCell>
                    )}
                  </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      </div>
  );
};

export default ParticipantsTab; 