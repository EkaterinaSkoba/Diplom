import React, {useState, useEffect, MouseEventHandler} from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import './TabStyles.css';
import {UUID} from "node:crypto";
import {useTelegramAuth} from "../../../../context/TelegramAuthContext";
import Procurement, {CompletionStatus, FundraisingStatus} from "../../../../model/Procurement";
import EventEntity from "../../../../model/EventEntity";
import {
  deleteProcurement,
  getEventProcurements,
  getProcurementById,
  updateProcurement
} from "../../../../api/endpoints/procurementEndpoints";
import Participant from "../../../../model/Participant";
import {getEventParticipants} from "../../../../api/endpoints/participantsEndpoints";
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Button,
  Chip,
  Box,
  Tooltip
} from "@mui/material";
import useMediaQuery from "@mui/material/useMediaQuery";

interface PurchasesProps {
  event: EventEntity;
  onAddPurchase: MouseEventHandler<HTMLButtonElement>;
}

const PurchasesTab = (props: PurchasesProps) => {
  const eventId: UUID = (useParams()).eventId as UUID;
  const event: EventEntity = props.event;
  const onAddPurchase = props.onAddPurchase;

  const navigate = useNavigate();
  const [purchases, setPurchases] = useState<Procurement[]>([]);
  const [totalAmount, setTotalAmount] = useState(0);
  const [budgetDifference, setBudgetDifference] = useState(0);
  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' });
  const { user } = useTelegramAuth();
  const [participants, setParticipants] = useState<Participant[]>([]);

  async function loadProcurements() {
    if (event && event) {
      const procurements = await getEventProcurements(event.id);
      setPurchases(procurements);

      const participantsData = await getEventParticipants(event.id) as Participant[];
      setParticipants(participantsData);

      // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã
      const total = procurements.reduce((sum, purchase) =>
          sum + (purchase.price ? purchase.price : 0), 0);
      setTotalAmount(total);

      // –†–∞—Å—á–µ—Ç —Ä–∞–∑–Ω–∏—Ü—ã —Å –±—é–¥–∂–µ—Ç–æ–º, –µ—Å–ª–∏ –±—é–¥–∂–µ—Ç —É–∫–∞–∑–∞–Ω
      if (event.budget) {
        setBudgetDifference(event.budget - total);
      }
    }
  }

  useEffect(() => {
    loadProcurements();
  }, [event]);

  const handleEditPurchase = (purchaseId, e) => {
    e.stopPropagation();
    navigate(`/event/${eventId}/edit-purchase/${purchaseId}`);
  };

  const handleAddToContributors = async (purchaseId, e) => {
    e.stopPropagation();
    const purchase = await getProcurementById(purchaseId);
    if (!purchase) return;

    let newContributors = [];

    // –ï—Å–ª–∏ contributors - –º–∞—Å—Å–∏–≤, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (Array.isArray(purchase.contributors)) {
      newContributors = [...purchase.contributors, 'currentUser'];
    } 
    // –ï—Å–ª–∏ contributors - —Å—Ç—Ä–æ–∫–∞ 'all', –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    else if (purchase.contributors === 'all') {
      return;
    } 
    // –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    else {
      newContributors = ['currentUser'];
    }

    await updateProcurement(eventId, purchaseId, purchase);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ UI
    setPurchases(prevPurchases => 
      prevPurchases.map(p => 
        p.id === purchaseId ? { ...p, contributors: newContributors } : p
      )
    );
  };

  const handleSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  const getStatusText = (status: CompletionStatus): string => {
    switch (status) {
      case CompletionStatus.DONE:
        return '–í—ã–ø–æ–ª–Ω–µ–Ω–æ';
      case CompletionStatus.IN_PROGRESS:
        return '–í –ø—Ä–æ—Ü–µ—Å—Å–µ';
      default:
        return '–ù–µ –Ω–∞—á–∞—Ç–æ';
    }
  };

  const getCollectionText = (collection: FundraisingStatus): string => {
    switch (collection) {
      case FundraisingStatus.NONE:
        return '–ù–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è';
      case FundraisingStatus.IN_PROGRESS:
        return '–°–æ–±–∏—Ä–∞–µ—Ç—Å—è';
      case FundraisingStatus.DONE:
        return '–°–æ–±—Ä–∞–Ω–æ';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const getParticipantNameById = (id: UUID): string => {
    const foundParticipant = participants.find(p => p.id === id);
    return foundParticipant?.name;
  };

  const isUserContributor = (purchase) => {
    if (purchase.contributors === 'all') return true;
    if (Array.isArray(purchase.contributors)) {
      return purchase.contributors.includes('currentUser');
    }
    return false;
  };

  const sortedPurchases = [...purchases].sort((a, b) => {
    if (!sortConfig.key) return 0;
    
    let aValue = a[sortConfig.key];
    let bValue = b[sortConfig.key];
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ–ª—è "–ö—Ç–æ —Å–∫–∏–¥—ã–≤–∞–µ—Ç—Å—è"
    if (sortConfig.key === 'contributors') {
      const aIsAll = aValue === 'all';
      const bIsAll = bValue === 'all';
      const aHasCurrentUser = aValue && (aValue === 'all' || (Array.isArray(aValue) && aValue.includes('currentUser')));
      const bHasCurrentUser = bValue && (bValue === 'all' || (Array.isArray(bValue) && bValue.includes('currentUser')));
      
      // –°–Ω–∞—á–∞–ª–∞ "–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏"
      if (aIsAll && !bIsAll) return -1;
      if (!aIsAll && bIsAll) return 1;
      
      // –ó–∞—Ç–µ–º –∑–∞–ø–∏—Å–∏ —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      if (aHasCurrentUser && !bHasCurrentUser) return -1;
      if (!aHasCurrentUser && bHasCurrentUser) return 1;
      
      return 0;
    }
    
    if (typeof aValue === 'string' && typeof bValue === 'string') {
      aValue = aValue.toLowerCase();
      bValue = bValue.toLowerCase();
    }
    
    if (aValue < bValue) {
      return sortConfig.direction === 'ascending' ? -1 : 1;
    }
    if (aValue > bValue) {
      return sortConfig.direction === 'ascending' ? 1 : -1;
    }
    return 0;
  });

  const renderSortIndicator = (key) => {
    if (sortConfig.key === key) {
      return sortConfig.direction === 'ascending' ? ' ‚Üë' : ' ‚Üì';
    }
    return null;
  };

  const getContributorsText = (contributors: UUID[]): string => {
    if (!contributors || contributors.length === 0) {
      return '–ù–∏–∫—Ç–æ –Ω–µ —Å–∫–∏–¥—ã–≤–∞–µ—Ç—Å—è';
    }

    return contributors.map(id => getParticipantNameById(id)).join(', ');
  };

  // –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞ (–¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –≤–∏–¥–∞)
  const [isMobileView, setIsMobileView] = useState(window.innerWidth < 768);

  async function handleDeletePurchase(purchaseId: UUID) {
    const confirmDelete = window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–∫—É–ø–∫—É?");
    if (!confirmDelete) return;

    await deleteProcurement(eventId, purchaseId);
    loadProcurements();
  }

  useEffect(() => {
    const handleResize = () => {
      setIsMobileView(window.innerWidth < 768);
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return (
      <div className="tab-container">
        <div className="tab-header">
          <h2>–°–ø–∏—Å–æ–∫ –∑–∞–∫—É–ø–æ–∫</h2>
          <Button variant="contained" color="primary" onClick={onAddPurchase}>–î–æ–±–∞–≤–∏—Ç—å</Button>
        </div>

        {purchases.length === 0 ? (
            <div className="empty-tab">
              <p>–°–ø–∏—Å–æ–∫ –∑–∞–∫—É–ø–æ–∫ –ø—É—Å—Ç</p>
              <Button variant="contained" color="primary" onClick={onAddPurchase}>–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫—É–ø–∫—É</Button>
            </div>
        ) : (
            isMobileView ? (
                <div className="purchases-mobile-view">
                  {purchases.map((purchase, index) => (
                      <Paper key={purchase.id} className="purchase-card" elevation={3}>
                        <Box p={2}>
                          <Box display="flex" justifyContent="space-between" alignItems="center">
                            <Box>
                              <strong>{index + 1}. {purchase.name}</strong>
                              <p>{getStatusText(purchase.completionStatus)}</p>
                            </Box>
                            <Box>
                              <Button size="small" onClick={(e) => handleEditPurchase(purchase.id, e)}>‚úé</Button>
                              {!isUserContributor(purchase) && (
                                  <Button size="small" onClick={(e) => handleAddToContributors(purchase.id, e)}>+</Button>
                              )}
                              <Button size="small" onClick={(e) => handleDeletePurchase(purchase.id)}>üóëÔ∏è</Button>
                            </Box>
                          </Box>
                          <p>–°—Ç–æ–∏–º–æ—Å—Ç—å: {purchase.price ? `${purchase.price} —Ä—É–±.` : '‚Äî'}</p>
                          <p>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {getParticipantNameById(purchase.responsibleId)}</p>
                          <p>–ö—Ç–æ —Å–∫–∏–¥—ã–≤–∞–µ—Ç—Å—è: {getContributorsText(purchase.contributors)}</p>
                        </Box>
                      </Paper>
                  ))}
                </div>
            ) : (
                <TableContainer component={Paper}>
                  <Table>
                    <TableHead>
                      <TableRow>
                        <TableCell>–ù–∞–∑–≤–∞–Ω–∏–µ</TableCell>
                        <TableCell>–°—Ç–æ–∏–º–æ—Å—Ç—å</TableCell>
                        <TableCell>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π</TableCell>
                        <TableCell>–ö—Ç–æ —Å–∫–∏–¥—ã–≤–∞–µ—Ç—Å—è</TableCell>
                        <TableCell>–°—Ç–∞—Ç—É—Å</TableCell>
                        <TableCell>–î–µ–π—Å—Ç–≤–∏—è</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {purchases.map((purchase, index) => (
                          <TableRow key={purchase.id}>
                            <TableCell>{index + 1}. {purchase.name}</TableCell>
                            <TableCell>{purchase.price ? `${purchase.price} —Ä—É–±.` : '‚Äî'}</TableCell>
                            <TableCell>{getParticipantNameById(purchase.responsibleId)}</TableCell>
                            <TableCell>
                              {purchase.contributors && purchase.contributors.length > 0 ? (
                                  <Box display="flex" flexWrap="wrap" gap={1}>
                                    {purchase.contributors.map((value) => (
                                        <Chip key={value} label={getParticipantNameById(value)} />
                                    ))}
                                  </Box>
                              ) : '–ù–∏–∫—Ç–æ –Ω–µ —Å–∫–∏–¥—ã–≤–∞–µ—Ç—Å—è'}
                            </TableCell>
                            <TableCell>{getStatusText(purchase.completionStatus)}</TableCell>
                            <TableCell>
                              <Tooltip title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                                <Button size="small" onClick={(e) => handleEditPurchase(purchase.id, e)}>‚úé</Button>
                              </Tooltip>
                              {!isUserContributor(purchase) && (
                                  <Tooltip title="–î–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ —Å–ø–∏—Å–æ–∫ —Å–∫–∏–¥—ã–≤–∞—é—â–∏—Ö—Å—è">
                                    <Button size="small" onClick={(e) => handleAddToContributors(purchase.id, e)}>+</Button>
                                  </Tooltip>
                              )}
                              <Tooltip title="–£–¥–∞–ª–∏—Ç—å">
                                <Button size="small" onClick={() => handleDeletePurchase(purchase.id)}>üóëÔ∏è</Button>
                              </Tooltip>
                            </TableCell>
                          </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
            )
        )}
      </div>
  );
};

export default PurchasesTab; 