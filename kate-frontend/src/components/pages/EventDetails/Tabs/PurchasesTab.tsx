import React, {useState, useEffect, MouseEventHandler} from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import './TabStyles.css';
import {UUID} from "node:crypto";
import {useTelegramAuth} from "../../../../context/TelegramAuthContext";
import Procurement, {CompletionStatus, FundraisingStatus} from "../../../../model/Procurement";
import EventEntity from "../../../../model/EventEntity";
import {
  deleteProcurement,
  getEventProcurements,
  getProcurementById,
  updateProcurement
} from "../../../../api/endpoints/procurementEndpoints";
import Participant from "../../../../model/Participant";
import {getEventParticipants} from "../../../../api/endpoints/participantsEndpoints";
import {Box, Chip} from "@mui/material";

interface PurchasesProps {
  event: EventEntity;
  onAddPurchase: MouseEventHandler<HTMLButtonElement>;
}

const PurchasesTab = (props: PurchasesProps) => {
  const eventId: UUID = (useParams()).eventId as UUID;
  const event: EventEntity = props.event;
  const onAddPurchase = props.onAddPurchase;

  const navigate = useNavigate();
  const [purchases, setPurchases] = useState<Procurement[]>([]);
  const [totalAmount, setTotalAmount] = useState(0);
  const [budgetDifference, setBudgetDifference] = useState(0);
  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'ascending' });
  const { user } = useTelegramAuth();
  const [participants, setParticipants] = useState<Participant[]>([]);

  async function loadProcurements() {
    if (event && event) {
      const procurements = await getEventProcurements(event.id);
      setPurchases(procurements);

      const participantsData = await getEventParticipants(event.id) as Participant[];
      setParticipants(participantsData);

      // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã
      const total = procurements.reduce((sum, purchase) =>
          sum + (purchase.price ? purchase.price : 0), 0);
      setTotalAmount(total);

      // –†–∞—Å—á–µ—Ç —Ä–∞–∑–Ω–∏—Ü—ã —Å –±—é–¥–∂–µ—Ç–æ–º, –µ—Å–ª–∏ –±—é–¥–∂–µ—Ç —É–∫–∞–∑–∞–Ω
      if (event.budget) {
        setBudgetDifference(event.budget - total);
      }
    }
  }

  useEffect(() => {
    loadProcurements();
  }, [event]);

  const handleEditPurchase = (purchaseId, e) => {
    e.stopPropagation();
    navigate(`/event/${eventId}/edit-purchase/${purchaseId}`);
  };

  const handleAddToContributors = async (purchaseId, e) => {
    e.stopPropagation();
    const purchase = await getProcurementById(purchaseId);
    if (!purchase) return;

    let newContributors = [];

    // –ï—Å–ª–∏ contributors - –º–∞—Å—Å–∏–≤, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (Array.isArray(purchase.contributors)) {
      newContributors = [...purchase.contributors, 'currentUser'];
    } 
    // –ï—Å–ª–∏ contributors - —Å—Ç—Ä–æ–∫–∞ 'all', –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    else if (purchase.contributors === 'all') {
      return;
    } 
    // –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    else {
      newContributors = ['currentUser'];
    }

    await updateProcurement(eventId, purchaseId, purchase);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ UI
    setPurchases(prevPurchases => 
      prevPurchases.map(p => 
        p.id === purchaseId ? { ...p, contributors: newContributors } : p
      )
    );
  };

  const handleSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  const getStatusText = (status: CompletionStatus): string => {
    switch (status) {
      case CompletionStatus.DONE:
        return '–í—ã–ø–æ–ª–Ω–µ–Ω–æ';
      case CompletionStatus.IN_PROGRESS:
        return '–í –ø—Ä–æ—Ü–µ—Å—Å–µ';
      default:
        return '–ù–µ –Ω–∞—á–∞—Ç–æ';
    }
  };

  const getCollectionText = (collection: FundraisingStatus): string => {
    switch (collection) {
      case FundraisingStatus.NONE:
        return '–ù–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è';
      case FundraisingStatus.IN_PROGRESS:
        return '–°–æ–±–∏—Ä–∞–µ—Ç—Å—è';
      case FundraisingStatus.DONE:
        return '–°–æ–±—Ä–∞–Ω–æ';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const getParticipantNameById = (id: UUID): string => {
    const foundParticipant = participants.find(p => p.id === id);
    return foundParticipant?.name;
  };

  const isUserContributor = (purchase) => {
    if (purchase.contributors === 'all') return true;
    if (Array.isArray(purchase.contributors)) {
      return purchase.contributors.includes('currentUser');
    }
    return false;
  };

  const sortedPurchases = [...purchases].sort((a, b) => {
    if (!sortConfig.key) return 0;
    
    let aValue = a[sortConfig.key];
    let bValue = b[sortConfig.key];
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ–ª—è "–ö—Ç–æ —Å–∫–∏–¥—ã–≤–∞–µ—Ç—Å—è"
    if (sortConfig.key === 'contributors') {
      const aIsAll = aValue === 'all';
      const bIsAll = bValue === 'all';
      const aHasCurrentUser = aValue && (aValue === 'all' || (Array.isArray(aValue) && aValue.includes('currentUser')));
      const bHasCurrentUser = bValue && (bValue === 'all' || (Array.isArray(bValue) && bValue.includes('currentUser')));
      
      // –°–Ω–∞—á–∞–ª–∞ "–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏"
      if (aIsAll && !bIsAll) return -1;
      if (!aIsAll && bIsAll) return 1;
      
      // –ó–∞—Ç–µ–º –∑–∞–ø–∏—Å–∏ —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      if (aHasCurrentUser && !bHasCurrentUser) return -1;
      if (!aHasCurrentUser && bHasCurrentUser) return 1;
      
      return 0;
    }
    
    if (typeof aValue === 'string' && typeof bValue === 'string') {
      aValue = aValue.toLowerCase();
      bValue = bValue.toLowerCase();
    }
    
    if (aValue < bValue) {
      return sortConfig.direction === 'ascending' ? -1 : 1;
    }
    if (aValue > bValue) {
      return sortConfig.direction === 'ascending' ? 1 : -1;
    }
    return 0;
  });

  const renderSortIndicator = (key) => {
    if (sortConfig.key === key) {
      return sortConfig.direction === 'ascending' ? ' ‚Üë' : ' ‚Üì';
    }
    return null;
  };

  const getContributorsText = (contributors: UUID[]): string => {
    if (!contributors || contributors.length === 0) {
      return '–ù–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö';
    }

    return contributors.map(id => getParticipantNameById(id)).join(', ');
  };

  // –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞ (–¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –≤–∏–¥–∞)
  const [isMobileView, setIsMobileView] = useState(window.innerWidth < 768);

  async function handleDeletePurchase(purchaseId: UUID) {
    await deleteProcurement(eventId, purchaseId);
    loadProcurements();
  }

  useEffect(() => {
    const handleResize = () => {
      setIsMobileView(window.innerWidth < 768);
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return (
    <div className="tab-container">
      <div className="tab-header">
        <h2>–°–ø–∏—Å–æ–∫ –∑–∞–∫—É–ø–æ–∫</h2>
        <button className="button" onClick={onAddPurchase}>
          –î–æ–±–∞–≤–∏—Ç—å
        </button>
      </div>

      {purchases.length === 0 ? (
        <div className="empty-tab">
          <p>–°–ø–∏—Å–æ–∫ –∑–∞–∫—É–ø–æ–∫ –ø—É—Å—Ç</p>
          <button className="button" onClick={onAddPurchase}>
            –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫—É–ø–∫—É
          </button>
        </div>
      ) : (
        <>
          {/* –ú–æ–±–∏–ª—å–Ω—ã–π –≤–∏–¥: –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–º–µ—Å—Ç–æ —Ç–∞–±–ª–∏—Ü—ã */}
          {isMobileView ? (
            <div className="purchases-mobile-view">
              {sortedPurchases.map((purchase, index) => (
                <div key={purchase.id} className="purchase-card">
                  <div className="purchase-header">
                    <div className="purchase-title">
                      <div className="primary-text">{index + 1}. {purchase.name}</div>
                      <div className="secondary-text">{getStatusText(purchase.completionStatus)}</div>
                    </div>
                    <div className="purchase-actions">
                      <button 
                        className="action-button edit"
                        onClick={(e) => handleEditPurchase(purchase.id, e)}
                        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                      >
                        ‚úé
                      </button>
                      {!isUserContributor(purchase) && (
                        <button 
                          className="action-button join"
                          onClick={(e) => handleAddToContributors(purchase.id, e)}
                          title="–î–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ —Å–ø–∏—Å–æ–∫ —Å–∫–∏–¥—ã–≤–∞—é—â–∏—Ö—Å—è"
                        >
                          +
                        </button>
                      )}
                      <button
                          className="action-button"
                          onClick={(e) => handleDeletePurchase(purchase.id)}
                          title="–£–¥–∞–ª–∏—Ç—å"
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </div>
                  <div className="purchase-details">
                    <div className="purchase-info">
                      <span className="info-label">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                      <span className="info-value">{purchase.price ? `${purchase.price} —Ä—É–±.` : '‚Äî'}</span>
                      {getCollectionText(purchase.fundraisingStatus) && (
                        <span className="secondary-text">{getCollectionText(purchase.fundraisingStatus)}</span>
                      )}
                    </div>
                    <div className="purchase-info">
                      <span className="info-label">–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</span>
                      <span className="info-value">
                         {getParticipantNameById(purchase.responsibleId)}
                      </span>
                    </div>
                    <div className="purchase-info">
                      <span className="info-label">–ö—Ç–æ —Å–∫–∏–¥—ã–≤–∞–µ—Ç—Å—è:</span>
                      <span className="info-value">{getContributorsText(purchase.contributors)}</span>
                    </div>
                  </div>
                </div>
              ))}
              <div className="purchase-summary">
                <div className="total-amount">
                  <strong>–ò—Ç–æ–≥–æ:</strong> {totalAmount} —Ä—É–±.
                </div>
                {event.budget && (
                  <div className="budget-difference">
                    <strong>–†–∞–∑–Ω–∏—Ü–∞ —Å –±—é–¥–∂–µ—Ç–æ–º:</strong> 
                    <span className={budgetDifference >= 0 ? 'positive' : 'negative'}>
                      {budgetDifference >= 0 ? '+' : ''}{budgetDifference} —Ä—É–±.
                    </span>
                  </div>
                )}
              </div>
            </div>
          ) : (
            /* –î–µ—Å–∫—Ç–æ–ø–Ω—ã–π –≤–∏–¥: –æ–±—ã—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ */
            <div className="table-container purchases-table">
              <table>
                <thead>
                  <tr>
                    <th 
                      onClick={() => handleSort('title')} 
                      className="sortable column-title"
                    >
                      –ù–∞–∑–≤–∞–Ω–∏–µ{renderSortIndicator('title')}
                    </th>
                    <th 
                      onClick={() => handleSort('cost')} 
                      className="sortable column-cost"
                    >
                      –°—Ç–æ–∏–º–æ—Å—Ç—å{renderSortIndicator('cost')}
                    </th>
                    <th 
                      onClick={() => handleSort('responsible')} 
                      className="sortable"
                    >
                      –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π{renderSortIndicator('responsible')}
                    </th>
                    <th 
                      onClick={() => handleSort('contributors')} 
                      className="sortable"
                    >
                      –ö—Ç–æ —Å–∫–∏–¥—ã–≤–∞–µ—Ç—Å—è{renderSortIndicator('contributors')}
                    </th>
                    <th 
                      onClick={() => handleSort('status')} 
                      className="sortable"
                    >
                      –°—Ç–∞—Ç—É—Å{renderSortIndicator('status')}
                    </th>
                    <th className="actions-column">–î–µ–π—Å—Ç–≤–∏—è</th>
                  </tr>
                </thead>
                <tbody>
                  {sortedPurchases.map((purchase, index) => (
                    <tr key={purchase.id}>
                      <td className="combined-title">
                        <div className="primary-text">{index + 1}. {purchase.name}</div>
                        <div className="secondary-text">{getStatusText(purchase.completionStatus)}</div>
                      </td>
                      <td className="combined-cost">
                        <div className="primary-text">{purchase.price ? `${purchase.price} —Ä—É–±.` : '‚Äî'}</div>
                        {getCollectionText(purchase.fundraisingStatus) && (
                          <div className="secondary-text">{getCollectionText(purchase.fundraisingStatus)}</div>
                        )}
                      </td>
                      <td>
                        {getParticipantNameById(purchase.responsibleId)}
                      </td>
                      <td>
                        {purchase.contributors && purchase.contributors.length > 0 ? (
                          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                          {purchase.contributors.map((value) => (
                              <Chip
                                  key={value}
                                  label={getParticipantNameById(value)}
                              />
                          ))}
                        </Box>) : '–ù–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö'}
                      </td>
                      <td>{getStatusText(purchase.completionStatus)}</td>
                      <td className="actions-cell">
                        <button 
                          className="action-button edit"
                          onClick={(e) => handleEditPurchase(purchase.id, e)}
                          title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                        >
                          ‚úé
                        </button>
                        {!isUserContributor(purchase) && (
                          <button 
                            className="action-button join"
                            onClick={(e) => handleAddToContributors(purchase.id, e)}
                            title="–î–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ —Å–ø–∏—Å–æ–∫ —Å–∫–∏–¥—ã–≤–∞—é—â–∏—Ö—Å—è"
                          >
                            +
                          </button>
                        )}
                        <button
                            className="action-button"
                            onClick={(e) => handleDeletePurchase(purchase.id)}
                            title="–£–¥–∞–ª–∏—Ç—å"
                        >
                          üóëÔ∏è
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
                <tfoot>
                  <tr>
                    <td colSpan={2} className="total-row">
                      <strong>–ò—Ç–æ–≥–æ:</strong> {totalAmount} —Ä—É–±.
                    </td>
                    <td colSpan={5}>
                      {event.budget && (
                        <div className="budget-difference">
                          <strong>–†–∞–∑–Ω–∏—Ü–∞ —Å –±—é–¥–∂–µ—Ç–æ–º:</strong> 
                          <span className={budgetDifference >= 0 ? 'positive' : 'negative'}>
                            {budgetDifference >= 0 ? '+' : ''}{budgetDifference} —Ä—É–±.
                          </span>
                        </div>
                      )}
                    </td>
                  </tr>
                </tfoot>
              </table>
            </div>
          )}
        </>
      )}
    </div>
  );
};

export default PurchasesTab; 