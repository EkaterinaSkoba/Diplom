import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import './TabStyles.css';
import {UUID} from "node:crypto";
import {useTelegramAuth} from "../../../../context/TelegramAuthContext";
import {
  getAssignedProcurementsForParticipant,
  getProcurementById,
  updateProcurement
} from "../../../../api/endpoints/procurementEndpoints";
import Procurement, {CompletionStatus} from "../../../../model/Procurement";
import {getEventParticipants} from "../../../../api/endpoints/participantsEndpoints";
import Participant from "../../../../model/Participant";
import {MenuItem, Select} from "@mui/material";

const MyTasksTab = ({ event }) => {
  const eventId: UUID = (useParams()).eventId as UUID;
  const [tasks, setTasks] = useState<Procurement[]>([]);
  const { user } = useTelegramAuth();
  const [participants, setParticipants] = useState<Participant[]>([]);
  const [selectedParticipantId, setSelectedParticipantId] = useState<UUID | null>(null);
  const [inputValues, setInputValues] = useState({});

  useEffect(() => {
    async function fetchParticipants() {
      const eventParticipants = await getEventParticipants(eventId);
      if (Array.isArray(eventParticipants)) {
        setParticipants(eventParticipants);
        const currentUser = eventParticipants.find(p => p.tgUserId === user.id);
        if (currentUser) {
          setSelectedParticipantId(currentUser.id);
          loadTasks(currentUser.id);
        }
      }
    }
    fetchParticipants();
  }, [eventId]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)
  const formatPrice = (price: number | null | undefined): string => {
    if (price === null || price === undefined) return '';
    if (price === 0) return '0';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    return price.toFixed(2).replace(/\.00$/, ''); // –£–±–∏—Ä–∞–µ–º .00 –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–ø–µ–µ–∫
  };

  async function loadTasks(participantId: UUID | null) {
    if (!participantId) return;
    const userTasks = await getAssignedProcurementsForParticipant(participantId);
    setTasks(userTasks || []);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const newInputValues = {};
    userTasks.forEach(task => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω
      newInputValues[task.id] = formatPrice(task.price);
    });
    setInputValues(newInputValues);
  }

  useEffect(() => {
    if (selectedParticipantId) {
      loadTasks(selectedParticipantId);
    }
  }, [selectedParticipantId]);
 
  const handleParticipantChange = (event) => {
    const newParticipantId = event.target.value;
    setSelectedParticipantId(newParticipantId);
    loadTasks(newParticipantId); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å—Ä–∞–∑—É
  };

  const handleTaskStatusChange = async (taskId: UUID, newStatus: CompletionStatus) => {
    let procurementToUpdate = await getProcurementById(taskId);
    procurementToUpdate.completionStatus = newStatus;
    await updateProcurement(eventId, taskId, procurementToUpdate, selectedParticipantId);
    loadTasks(selectedParticipantId);
  };

  const handleCostChange = async (taskId: UUID, newCostString: string) => {
    const normalized = newCostString.replace(',', '.');
    if (normalized === '') return;
    
    const parsed = parseFloat(normalized);
    if (!isNaN(parsed)) {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫—É–ø–∫–µ
      let procurementToUpdate = await getProcurementById(taskId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
      procurementToUpdate.price = parsed;
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
      procurementToUpdate.completionStatus = CompletionStatus.DONE;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setTasks((prevTasks) => 
        prevTasks.map((task) =>
          task.id === taskId ? { 
            ...task, 
            price: parsed,
            completionStatus: CompletionStatus.DONE
          } : task
        )
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
      await updateProcurement(eventId, taskId, procurementToUpdate, selectedParticipantId);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞
  const handleInputChange = (taskId: UUID, value: string) => {
    // –ï—Å–ª–∏ –ø–æ–ª–µ –±—ã–ª–æ "0" –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ü–∏—Ñ—Ä—É, –∑–∞–º–µ–Ω—è–µ–º "0" –Ω–∞ –Ω–æ–≤—É—é —Ü–∏—Ñ—Ä—É
    if (inputValues[taskId] === '0' && /^[1-9]$/.test(value)) {
      setInputValues(prev => ({
        ...prev,
        [taskId]: value
      }));
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã –Ω—É–ª—è
      handleCostChange(taskId, value);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –≤–æ–∑–º–æ–∂–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (—Ç–æ—á–∫—É –∏–ª–∏ –∑–∞–ø—è—Ç—É—é)
    // –∏ –Ω–µ –±–æ–ª–µ–µ –¥–≤—É—Ö —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
    const regex = /^$|^0$|^[1-9][0-9]*[.,]?[0-9]{0,2}$/;
    
    if (regex.test(value)) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
      setInputValues(prev => ({
        ...prev,
        [taskId]: value
      }));
      
      // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ, —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º
      if (value !== '') {
        handleCostChange(taskId, value);
      }
      // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º 0
      else {
        handleCostChange(taskId, '0');
      }
    }
  };

  return (
      <div className="tab-container">
        <div className="tab-header">
          <h2>–ó–∞–¥–∞—á–∏</h2>
          <Select value={selectedParticipantId || ''}  onChange={handleParticipantChange}>
            {participants.map(participant => (
                <MenuItem key={participant.id} value={participant.id}>
                  {participant.tgUserId === user.id ? '–Ø' : (participant.name || '–ë–µ–∑ –∏–º–µ–Ω–∏')}
                </MenuItem>
            ))}
          </Select>
        </div>

        {!tasks || tasks.length === 0 ? (
            <div className="empty-tab">
              <p>–ó–∞–¥–∞—á –Ω–µ—Ç</p>
            </div>
        ) : (
            <div className="table-container my-tasks-table">
              <table>
                <thead>
                <tr>
                  <th>–ó–∞–¥–∞—á–∞</th>
                  <th>–°—Ç–æ–∏–º–æ—Å—Ç—å</th>
                  <th>–°—Ç–∞—Ç—É—Å</th>
                </tr>
                </thead>
                <tbody>
                {tasks.map((task, index) => (
                    <tr key={task.id}>
                      <td >
                        <div style={{
                                display: '-webkit-box',
                                WebkitLineClamp: 3,
                                WebkitBoxOrient: 'vertical',
                                overflow: 'hidden',
                                textOverflow: 'ellipsis',
                                lineHeight: 1.3,
                                wordBreak: 'break-word'
                              }}>
                                {index + 1}. {task.name}
                        </div>
                        {task.comment && <div 
                        className="secondary-text"
                        style={{
                          display: '-webkit-box',
                          WebkitLineClamp: 3,
                          WebkitBoxOrient: 'vertical',
                          overflow: 'hidden',
                          textOverflow: 'ellipsis',
                          lineHeight: 1.2,
                          wordBreak: 'break-word'
                        }}>{task.comment}</div>}
                      </td>
                      <td>
                        <input
                            type="text"
                            inputMode="decimal" // –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
                            value={inputValues[task.id] || ''}  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                            onChange={(e) => handleInputChange(task.id, e.target.value)} // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                            placeholder="–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å"
                            min = "0"
                            className="cost-input"
                            onWheel={(e) => e.currentTarget.blur()} // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–æ–ª—ë—Å–∏–∫–æ–º
                        />
                      </td>
                      
                      <td>
                      <Select
                          value={task.completionStatus}
                          onChange={(e) => handleTaskStatusChange(task.id, e.target.value as CompletionStatus)}
                          renderValue={(selected) => {
                            if (selected === CompletionStatus.DONE) {
                              return "‚úÖ";
                            } else {
                              return "üîÑ";
                            }
                          }}
                          sx={{
                            height: '36px',
                            fontSize: '14px',
                            backgroundColor: task.completionStatus === CompletionStatus.DONE ? "#e6f7d9" : "#f0ebff",
                            color: task.completionStatus === CompletionStatus.DONE ? "#71c017" : "#331bab",
                            "& .MuiOutlinedInput-notchedOutline": {
                              borderColor: task.completionStatus === CompletionStatus.DONE ? "#71c017" : "#331bab",
                            },
                            "&:hover .MuiOutlinedInput-notchedOutline": {
                              borderColor: task.completionStatus === CompletionStatus.DONE ? "#5aa00e" : "#1a0a8a",
                            },
                            "& .MuiSelect-select": {
                              padding: '0px 0px 0px 10px',
                            },
                          }}
                        >
                          <MenuItem 
                            value={CompletionStatus.IN_PROGRESS}
                          >
                            üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ
                          </MenuItem>
                          <MenuItem 
                            value={CompletionStatus.DONE}
                          >
                            ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ
                          </MenuItem>
                      </Select>
                      </td>
                    </tr>
                ))}
                </tbody>
              </table>
            </div>
        )}
      </div>
  );
};

export default MyTasksTab; 